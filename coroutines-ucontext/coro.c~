#include <stdio.h>
#include <ucontext.h>
#include "Coro.h"
#define CORO_STACK_SIZE     8192
#define CORO_DEFAULT_STACK_SIZE  (65536*4)
#define CORO_STACK_SIZE_MIN 8192

typedef void (*makecontext_func)(void);

typedef struct CallbackBlock
{
	void *context;
	CoroStartCallback *func;
} CallbackBlock;

void Coro_allocStackIfNeeded(Coro *self)
{
	if (self->stack && self->requestedStackSize < self->allocatedStackSize)
	{
//		io_free(self->stack);
		self->stack = NULL;
		self->requestedStackSize = 0;
	}

	if (!self->stack)
	{
		self->stack = (void *)calloc(1, self->requestedStackSize + 16);
		self->allocatedStackSize = self->requestedStackSize;
		//printf("Coro_%p allocating stack size %i\n", (void *)self, self->requestedStackSize);
//		STACK_REGISTER(self);
	}
}

Coro *Coro_new(void)
{
	Coro *self = (Coro *)calloc(1, sizeof(Coro));
	self->requestedStackSize = CORO_DEFAULT_STACK_SIZE;
	self->allocatedStackSize = 0;

	self->stack = NULL;
	return self;
}

void *Coro_stack(Coro *self)
{
	return self->stack;
}

size_t Coro_stackSize(Coro *self)
{
	return self->requestedStackSize;
}


void Coro_StartWithArg(CallbackBlock *block)
{
	(block->func)(block->context);
	printf("Scheduler error: returned from coro start function\n");
	exit(-1);
}

void Coro_initializeMainCoro(Coro *self)
{
	self->isMain = 1;
}

void Coro_switchTo_(Coro *self, Coro *next)
{
	swapcontext(&self->env, &next->env);
}

void Coro_setup(Coro *self, void *arg)
{
	ucontext_t *ucp = (ucontext_t *) &self->env;
	getcontext(ucp);
	ucp->uc_stack.ss_sp    = Coro_stack(self);
	ucp->uc_stack.ss_size  = Coro_stackSize(self);
	ucp->uc_stack.ss_flags = 0;
	ucp->uc_link = NULL;
	makecontext(ucp, (makecontext_func)Coro_StartWithArg, 1, arg);
}


void Coro_startCoro_(Coro *self, Coro *other, void *context, CoroStartCallback *callback)
{
	CallbackBlock block;
	block.context = context;
	block.func    = callback;
	Coro_allocStackIfNeeded(other);
	Coro_setup(other, &block);
	Coro_switchTo_(self, other);
}
